## 使用 Context 深层传递参数

通常来说，你会通过 props 将信息从父组件传递到子组件。但是，如果你必须通过许多中间组件向下传递 props，或是在你应用中的许多组件需要相同的信息，传递 props 会变的十分冗长和不便。**Context** 允许父组件向其下层无论多深的任何组件提供信息，而无需通过 props 显式传递。

### 传递 props 带来的问题

传递props的缺点在于需要逐层传递props的情况

### Context：传递 props 的另一种方法

Context 让父组件可以为它下面的整个组件树提供数据。

你可以通过以下三个步骤来实现它：

1. **创建** 一个 context。
2. 在需要数据的组件内 **使用** 刚刚创建的 context。
3. 在指定数据的组件中 **提供** 这个 context。

#### Step 1：创建 context

首先，你需要创建这个 context，并 **将其从一个文件中导出**，这样你的组件才可以使用它：

```react
import { createContext } from 'react';

export const LevelContext = createContext(1);

```

`createContext` 只需**默认值**这么一个参数。在这里, `1` 表示最大的标题级别，但是你可以传递任何类型的值（甚至可以传入一个对象）。你将在下一个步骤中见识到默认值的意义。

#### Step 2：使用 Context

从React中引入useContext Hook以及刚才创建的文件

**即使你正在使用 context，但是你还没有提供它。** React 不知道从哪里获取这个 context！

如果你不提供 context，React 会使用你在上一步指定的默认值。



#### Step 3：提供 context 

**把它们用 context provider 包裹起来**